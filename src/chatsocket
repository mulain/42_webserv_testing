#include <iostream>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

class Socket {
public:
    Socket() : m_sock(-1) { }
    virtual ~Socket() { }

    // Create a socket of the specified type (e.g., SOCK_STREAM for TCP)
    bool create(int type) {
        m_sock = socket(AF_INET, type, 0);
        if (m_sock == -1) {
            perror("Error creating socket");
            return false;
        }
        return true;
    }

    // Bind the socket to the specified IP address and port number
    bool bind(const std::string& ipAddress, int port) {
        sockaddr_in address;
        address.sin_family = AF_INET;
        address.sin_addr.s_addr = inet_addr(ipAddress.c_str());
        address.sin_port = htons(port);

        int result = ::bind(m_sock, (sockaddr*)&address, sizeof(address));
        if (result == -1) {
            perror("Error binding socket");
            return false;
        }
        return true;
    }

    // Listen for incoming connections
    bool listen(int backlog = 5) {
        int result = ::listen(m_sock, backlog);
        if (result == -1) {
            perror("Error listening for connections");
            return false;
        }
        return true;
    }

    // Accept an incoming connection and return a new socket for communication
    bool accept(Socket& newSocket) {
        sockaddr_in address;
        socklen_t len = sizeof(address);
		
        int newSock = ::accept(m_sock, (sockaddr*)&address, &len);
        if (newSock == -1) {
            perror("Error accepting connection");
            return false;
        }
        newSocket.m_sock = newSock;
        return true;
    }

    // Connect to a remote socket at the specified IP address and port number
    bool connect(const std::string& ipAddress, int port) {
        sockaddr_in address;
        address.sin_family = AF_INET;
        address.sin_addr.s_addr = inet_addr(ipAddress.c_str());
        address.sin_port = htons(port);

        int result = ::connect(m_sock, (sockaddr*)&address, sizeof(address));
        if (result == -1) {
            perror("Error connecting to remote socket");
            return false;
        }
        return true;
    }

    // Send data over the socket
    bool send(const std::string& data) {
        int result = ::send(m_sock, data.c_str(), data.size(), 0);
        if (result == -1) {
            perror("Error sending data over socket");
            return false;
        }
        return true;
    }

    // Receive data from the socket
    bool receive(std::string& data) {
        const int bufferSize = 1024;
        char buffer[bufferSize];
        int result = ::recv(m_sock, buffer, bufferSize, 0);
        if (result == -1) {
            perror("Error receiving data from socket");
            return false;
        }
        data = std::string(buffer, result);
        return true;
    }

    // Close the socket
    void close() {
        if (m_sock != -1) {
            ::close(m_sock);
            m_sock = -1;
        }
    }

private:
    int m_sock;
};
